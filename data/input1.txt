Hash table based implementation of the Map interface This implementation provides all of the optional map operations and permits null values and the null key The HashMap class is roughly equivalent to Hashtable except that it is unsynchronized and permits nulls This class makes no guarantees as to the order of the map in particular it does not guarantee that the order will remain constant over time 
This implementation provides constanttime performance for the basic operations get and put assuming the hash function disperses the elements properly among the buckets Iteration over collection views requires time proportional to the capacity of the HashMap instance the number of buckets plus its size the number of keyvalue mappings Thus its very important not to set the initial capacity too high or the load factor too low if iteration performance is important 
An instance of HashMap has two parameters that affect its performance initial capacity and load factor The capacity is the number of buckets in the hash table and the initial capacity is simply the capacity at the time the hash table is created The load factor is a measure of how full the hash table is allowed to get before its capacity is automatically increased When the number of entries in the hash table exceeds the product of the load factor and the current capacity the hash table is rehashed that is internal data structures are rebuilt so that the hash table has approximately twice the number of buckets 
As a general rule the default load factor  offers a good tradeoff between time and space costs Higher values decrease the space overhead but increase the lookup cost reflected in most of the operations of the HashMap class including get and put The expected number of entries in the map and its load factor should be taken into account when setting its initial capacity so as to minimize the number of rehash operations If the initial capacity is greater than the maximum number of entries divided by the load factor no rehash operations will ever occur 
If many mappings are to be stored in a HashMap instance creating it with a sufficiently large capacity will allow the mappings to be stored more efficiently than letting it perform automatic rehashing as needed to grow the table 
Note that this implementation is not synchronized If multiple threads access a hash map concurrently and at least one of the threads modifies the map structurally it must be synchronized externally A structural modification is any operation that adds or deletes one or more mappings merely changing the value associated with a key that an instance already contains is not a structural modification This is typically accomplished by synchronizing on some object that naturally encapsulates the map If no such object exists the map should be wrapped using the CollectionssynchronizedMap method This is best done at creation time to prevent accidental unsynchronized access to the map
The iterators returned by all of this classs collection view methods are failfast if the map is structurally modified at any time after the iterator is created in any way except through the iterators own remove method the iterator will throw a ConcurrentModificationException Thus in the face of concurrent modification the iterator fails quickly and cleanly rather than risking arbitrary nondeterministic behavior at an undetermined time in the future 
Note that the failfast behavior of an iterator cannot be guaranteed as it is generally speaking impossible to make any hard guarantees in the presence of unsynchronized concurrent modification Failfast iterators throw ConcurrentModificationException on a besteffort basis Therefore it would be wrong to write a program that depended on this exception for its correctness the failfast behavior of iterators should be used only to detect bugs 
This class is a member of the Java Collections Framework 
Returns the value to which the specified key is mapped or null if this map contains no mapping for the key 
More formally if this map contains a mapping from a key k to a value such that then this method returns v otherwise it returns null There can be at most one such mapping 
A return value of null does not necessarily indicate that the map contains no mapping for the key its also possible that the map explicitly maps the key to null The containsKey operation may be used to distinguish these two cases 
Returns a Set view of the keys contained in this map The set is backed by the map so changes to the map are reflected in the set and viceversa If the map is modified while an iteration over the set is in progress except through the iterators own remove operation the results of the iteration are undefined The set supports element removal which removes the corresponding mapping from the map via the Iteratorremove Setremove removeAll retainAll and clear operations It does not support the add or addAll operations
Returns Collection view of the values contained in this map The collection is backed by the map so changes to the map are reflected in the collection and viceversa If the map is modified while an iteration over the collection is in progress except through the iterators own remove operation the results of the iteration are undefined The collection supports element removal which removes the corresponding mapping from the map via the Iteratorremove Collectionremove removeAll retainAll and clear operations
Returns a Set view of the mappings contained in this map The set is backed by the map so changes to the map are reflected in the set and viceversa If the map is modified while an iteration over the set is in progress except through the iterators own remove operation or through the setValue operation on a map entry returned by the iterator the results of the iteration are undefined The set supports element removal which removes the corresponding mapping from the map via the Iteratorremove Setremove removeAll retainAll and clear operations It does not support the add or addAll operations
